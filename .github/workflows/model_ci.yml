name: Model CI
on:
  push:
    branches:
    - 'master'
  pull_request:
    types: [opened, synchronize]

env:
  IS_MASTER_BRANCH: ${{ github.event_name == 'push' && (startsWith(github.event.ref, 'refs/tags') || github.ref == 'refs/heads/master') }}

jobs:
  build-model:
    name: Build, test, and upload model
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check stories are consistent
      run: |
        rasa data validate stories --max-history 5 --fail-on-warning

    - name: Train model
      run: |
        rasa train

    - name: Run Through Test Stories
      run: |
        rasa test core --stories test_stories/stories.md --fail-on-prediction-errors

    - name: Cross-validate NLU model
      run: |
        rasa test nlu -f 5 --cross-validation
        python format_results.py

    - name: Upload Cross Validation Results
      uses: actions/upload-artifact@master
      with:
        name: cross-validation-result
        path: results.md

    - name: Upload model
      if: env.IS_MASTER_BRANCH == 'true'
      uses: actions/upload-artifact@master
      with:
        name: model
        path: models

  share_cross_validation_result:
    # Separate job to avoid expired GitHub token
    name: Share cross validation results
    runs-on: ubuntu-latest
    needs: [build-model]

    steps:
    - name: Download Cross Validation Results
      uses: actions/download-artifact@master
      with:
        name: cross-validation-result

    - name: post cross-val results to PR
      uses: amn41/comment-on-pr@comment-file-contents
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: cross-validation-result/results.md

  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set image tag
      run: |
        if [[ $IS_MASTER_BRANCH == "false" ]]
        then
          IMAGE_TAG=${{ github.head_ref }}
        else
          IMAGE_TAG=$(basename ${{ github.ref }})

        echo "::set-env name=IMAGE_TAG::${IMAGE_NAME}-${{ github.sha }}"

    - name: GCP Auth
      env:
        GCLOUD_SERVICE_ACCOUNT_KEYFILE: ${{ secrets.GCLOUD_AUTH }}
      run: |
        echo "${GCLOUD_SERVICE_ACCOUNT_KEYFILE}" | base64 -d  > gcloud_sa_key.json
        gcloud auth activate-service-account --key-file=gcloud_sa_key.json

    - name: Build and push the Docker image
      run: |
        # Read and export variables from .env file
        set -o allexport; source .env; set +o allexport
        docker build . \
          --build-arg RASA_SDK_IMAGE=rasa/rasa-sdk:${RASA_SDK_VERSION} \
          --tag gcr.io/rasa-platform/carbon-bot-actions:$IMAGE_TAG
        gcloud docker -- push gcr.io/rasa-platform/carbon-bot-actions:$IMAGE_TAG

  deploy-to-cluster:
    name: Re-deploy the cluster with the latest action server
    runs-on: ubuntu-latest

    needs: 
    - build-images
    if: env.IS_MASTER_BRANCH == 'true'

    steps:
    # Checkout repository because we need the content of the `.env` file later
    - uses: actions/checkout@v2

    - name: Set image tag
      run: |
        if [[ $IS_MASTER_BRANCH == "false" ]]
        then
          IMAGE_TAG=${{ github.head_ref }}
        else
          IMAGE_TAG=$(basename ${{ github.ref }})

        echo "::set-env name=IMAGE_TAG::${IMAGE_NAME}-${{ github.sha }}"

    - name: GCP Auth
      env:
        GCLOUD_SERVICE_ACCOUNT_KEYFILE: ${{ secrets.GCLOUD_AUTH }}
      run: |
        echo "${GCLOUD_SERVICE_ACCOUNT_KEYFILE}" | base64 -d  > gcloud_sa_key.json
        gcloud auth activate-service-account --key-file=gcloud_sa_key.json
        gcloud container clusters get-credentials rasa-bots --zone europe-west1 --project rasa-platform

    - name: Install Chart
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        RASA_TOKEN: ${{ secrets.RASA_TOKEN }}
        RASA_X_TOKEN: ${{ secrets.RASA_X_TOKEN }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        PASSWORD_SALT: ${{ secrets.PASSWORD_SALT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        RASA_X_ADMIN_PASSWORD: ${{ secrets.RASA_X_ADMIN_PASSWORD }}

      run: |
        # Install helm v3
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        helm repo add rasa-x https://rasahq.github.io/rasa-x-helm

        # Read and export variables from .env file
        set -o allexport; source .env; set +o allexport

        helm upgrade --install carbon-assistant rasa-x/rasa-x --namespace carbon-assistant \
            --set global.postgresql.postgresqlPassword="${DB_PASSWORD}" \
            --set app.tag=$IMAGE_TAG \
            --set rasax.initialUser.password="${RASA_X_ADMIN_PASSWORD}" \
            --set rasax.token=${RASA_TOKEN} \
            --set rasax.jwtSecret=${JWT_SECRET} \
            --set rasa.token=${RASA_X_TOKEN} \
            --set rasax.passwordSalt=${PASSWORD_SALT} \
            --set global.redis.password=${REDIS_PASSWORD} \
            --set rabbitmq.rabbitmq.password=${RABBITMQ_PASSWORD} \
            --set rasax.disableTelemetry=True \
            --set rasax.tag="$RASA_X_VERSION" \
            --set eventService.tag="${RASA_X_VERSION}" \
            --set nginx.tag="${RASA_X_VERSION}" \
            --set rasa.tag="${RASA_VERSION}-full" \
            --values helm-values.yml

        cat <<EOF | kubectl apply --namespace carbon-assistant -f  -
        apiVersion: networking.gke.io/v1beta1
        kind: ManagedCertificate
        metadata:
          generation: 1
          name: rasa-bots-certificate
        spec:
          domains:
          - carbon.rasa-bots.com
        EOF

  upload-model:
    name: Upload the trained model to Rasa X
    needs: 
    - deploy-to-cluster
    - build-model

    if: env.IS_MASTER_BRANCH == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: Download Model
      uses: actions/download-artifact@master
      with:
        name: model

    - name: GCP Auth
      env:
        GCLOUD_SERVICE_ACCOUNT_KEYFILE: ${{ secrets.GCLOUD_AUTH }}
      run: |
        echo "${GCLOUD_SERVICE_ACCOUNT_KEYFILE}" | base64 -d  > gcloud_sa_key.json
        gcloud auth activate-service-account --key-file=gcloud_sa_key.json
        gcloud container clusters get-credentials rasa-bots --zone europe-west1 --project rasa-platform

    - name: Upload Model to Rasa
      env:
        RASA_X_PASSWORD: ${{ secrets.RASA_X_ADMIN_PASSWORD }}
        RASA_X_USERNAME: admin
      run: |
        RASA_X_DEPLOYMENT_LABEL="app.kubernetes.io/component=rasa-x"
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=10m -l "${RASA_X_DEPLOYMENT_LABEL}" deployment --namespace carbon-assistant

        # Get rasa-x pod
        RASA_X_POD=$(kubectl get pods --namespace carbon-assistant -l "${RASA_X_DEPLOYMENT_LABEL}" --no-headers | head -1 | awk '{print $1}')

        # Get token
        RASA_X_TOKEN=$(curl -s --header "Content-Type: application/json" \
          --request POST \
          --data "{\"username\":\"${RASA_X_USERNAME}\",\"password\":\"${RASA_X_PASSWORD}\"}" \
          https://carbon.rasa-bots.com/api/auth | jq -r .access_token)

        # Upload model
        cd model; export MODELNAME=$(ls); curl -k --fail -H "Authorization: Bearer ${RASA_X_TOKEN}" -F "model=@${MODELNAME}" http://carbon.rasa-bots.com/api/projects/default/models
        # ensure model is ready and tag as production
        sleep 5
        export MODEL=$(ls | xargs -I{} basename {} .tar.gz);curl --fail -XPUT -H "Authorization: Bearer ${RASA_X_TOKEN}" https://carbon.rasa-bots.com/api/projects/default/models/${MODEL}/tags/production
